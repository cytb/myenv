{-# LANGUAGE GADTs, FlexibleInstances, FlexibleContexts, UndecidableInstances #-}

import Control.Concurrent
import Control.Monad

data Knob = Turned | Unturned
  deriving (Eq,Show)

data OrdinaryDoor = Opened Knob | Closed Knob
  deriving (Eq,Show)

class Door a where
  isOpen, isClose, canBeOpened     :: MVar a -> IO Bool
  pull, push, knobTurn, knobUnturn :: MVar a -> IO ()

  isClose md = isOpen md >>= return . not

instance Door OrdinaryDoor where
  isOpen md = withMVar md $ \x -> return $ case x of
      Opened _ -> True
      _        -> False

  canBeOpened md = withMVar md $ \x -> return $ case x of
      Closed Turned   -> True
      Closed Unturned -> False
      Opened _        -> False

  pull md = modifyMVar_ md $ \_ -> return (Closed Unturned)
  push md = modifyMVar_ md $ \x -> return $ case x of
      Closed Turned -> Opened Unturned
      _             -> x

  knobTurn md = modifyMVar_ md $ \x -> return $ case x of 
    Closed Unturned -> Closed Turned
    Opened Unturned -> Opened Turned
    _               -> x

  knobUnturn md = modifyMVar_ md $ \x -> return $ case x of 
    Closed Turned -> Closed Unturned
    _             -> x

createDoor :: IO (MVar OrdinaryDoor)
createDoor = newMVar $ Closed Unturned

test1 = do
  -- $door = new Door();
  door <- createDoor

  -- echo "\$door is a Door...\n";
  putStrLn "door is a Door"

  -- $door->knob->turn();
  -- echo '$door->knob->turn(); $door->can_be_opened(); => '.($door->can_be_opened()?'true':'false')."\n";
  knobTurn door
  canBeOpened door
    >>= putStrLn . ("knobTurn door; canBeOpened door => " ++) . show

  -- $door->knob->unturn();
  -- echo '$door->knob->unturn(); $door->can_be_opened(); => '.($door->can_be_opened()?'true':'false')."\n";
  knobUnturn door
  canBeOpened door
    >>= putStrLn . ("knobUnturn door; canBeOpened door => " ++) . show

  -- $door->push();
  -- echo '$door->push(); $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  push door
  isOpen door
    >>= putStrLn . ("push door; isOpen door => " ++) . show

  -- $door->knob->turn(); $door->push();
  -- echo '$door->knob->turn(); $door->push();; $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  knobTurn door
  push door
  isOpen door
    >>= putStrLn . ("knobTurn door; push door; isOpen door => " ++) . show

  -- $door->pull();
  -- echo '$door->pull; $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  -- echo '$door->can_be_opened(); => '.($door->can_be_opened()?'true':'false')."\n\n";
  pull door
  isOpen door >>= putStrLn . ("push door; isOpen door => " ++) . show
  canBeOpened door >>= putStrLn . ("canBeOpened door => " ++) . show
 

data WithCloser a where
  WithCloser :: Door a => Int -> MVar () -> MVar a -> WithCloser a

instance (Door a) => Door (WithCloser a) where
  isOpen      = callParentC isOpen
  canBeOpened = callParentC canBeOpened
  pull        = callParentC pull
  knobUnturn  = callParentC knobUnturn
  knobTurn    = callParentC knobTurn

  push md = modifyMVar_ md $ \(WithCloser n m md')-> do
    _ <- tryPutMVar m ()
    m' <- newEmptyMVar
    _ <- forkIO $ do
      threadDelay (n*1000000)
      t <- tryTakeMVar m'
      maybe (pull md) (return) t
    push md'

    return (WithCloser n m' md')

callParentC :: (Door a) => ((MVar a) -> IO b) -> MVar (WithCloser a) -> IO b
callParentC f a = withMVar a ( \(WithCloser _ _ d) -> f d )

withCloser :: (Door a) => Int -> MVar a -> IO (MVar (WithCloser a))
withCloser n md = do
  m     <- newEmptyMVar
  newMVar $ WithCloser n m md

createDoorWithCloser :: Int -> IO (MVar (WithCloser OrdinaryDoor))
createDoorWithCloser n = createDoor >>= withCloser n

test2 = do
  -- $door = new DoorWithCloser(3);
  door <- createDoorWithCloser 3

  -- echo "\$door is a DoorWithCloser...\n";
  putStrLn "door is a DoorWithCloser"

  -- $door->is_open();
  -- $door->knob->turn(); $door->push();
  knobTurn door
  push door

  -- echo '$door->knob->turn(); $door->push(); $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  isOpen door
    >>= putStrLn . ("knobTurn door; push door; isOpen door => " ++) . show

  -- echo '1 second after';
  putStrLn "1 second after"
  threadDelay (1*1000*1000)

  -- echo ', $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  isOpen door >>= putStrLn . ("isOpen door => " ++) . show

  -- echo '4 second after';
  putStrLn "4 second after"
  threadDelay (4*1000*1000)
  -- echo ', $door->is_open(); => '.($door->is_open()?'true':'false')."\n\n";
  isOpen door >>= putStrLn . ("isOpen door => " ++) . show

data WithStopper a where
  WithStopper :: (Door a) => Bool -> (MVar a) -> WithStopper a

instance (Door a, Stoppered (WithStopper a)) => Door (WithStopper a) where
  isOpen      = callParentS isOpen
  canBeOpened = callParentS canBeOpened
  knobUnturn  = callParentS knobUnturn
  knobTurn    = callParentS knobTurn

  pull md     = do stop <- isStoppered md
                   uwhen stop $ callParentS pull md

  push md     = do beStopperedOff md
                   callParentS push md

callParentS :: (Door a) => ((MVar a) -> IO b) -> MVar (WithStopper a) -> IO b
callParentS f a = withMVar a ( \(WithStopper _ d) -> f d )


beStoppered :: Bool -> MVar (WithStopper a) -> IO ()
beStoppered b md =
  modifyMVar_ md $ (\(WithStopper _ md') -> return $ WithStopper b md')

class Stoppered a where
  beStopperedOn  :: MVar a -> IO ()
  beStopperedOff :: MVar a -> IO ()
  isStoppered    :: MVar a -> IO Bool

instance Stoppered (WithStopper OrdinaryDoor) where
  beStopperedOn  = beStoppered True
  beStopperedOff = beStoppered False
  isStoppered md = withMVar md $ \(WithStopper b _) -> return b

instance Stoppered (WithCloser (WithStopper OrdinaryDoor)) where
  beStopperedOn  = callParentC beStopperedOn
  isStoppered    = callParentC isStoppered
  beStopperedOff md = do callParentC beStopperedOff md
                         push md

withStopper :: (Door a) => Bool -> MVar a -> IO (MVar (WithStopper a))
withStopper state = newMVar . WithStopper state 

createDoorWithStopper :: IO (MVar (WithStopper OrdinaryDoor))
createDoorWithStopper = createDoor >>= withStopper False

test3 = do 
  -- $door = new DoorWithStopper();
  door <- createDoorWithStopper

  -- echo "\$door is a DoorWithStopper...\n";
  putStrLn "door is a DoorWithStopper"

  -- $door->is_open();
  -- $door->knob->turn(); $door->push();
  knobTurn door
  push door

  -- echo '$door->knob->turn(); $door->push(); $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  isOpen door
    >>= putStrLn . ("knobTurn door; push door; isOpen door => " ++) . show

  -- $door->be_stoppered_on(); $door->pull();
  beStopperedOn door
  pull door

  -- echo '$door->be_stoppered_on(); $door->pull(); $door->is_close(); =>'.($door->is_close()?'true':'false')."\n";
  isOpen door
    >>= putStrLn . ("beStopperedOn door; pull door; isClose door => " ++) . show

  -- $door->be_stoppered_off(); $door->pull();
  beStopperedOff door
  pull door

  -- echo '$door->be_stoppered_off(); $door->pull(); $door->is_close(); =>'.($door->is_close()?'true':'false')."\n\n";
  isOpen door
    >>= putStrLn . ("beStopperedOff door; pull door; isClose door => " ++) . show
 
createDoorWithStopperCloser :: Int -> IO (MVar (WithCloser (WithStopper OrdinaryDoor)))
createDoorWithStopperCloser n =
  createDoorWithStopper >>= withCloser n

test4 = do
  -- $door = new DoorWithStopperCloser();
  door <- createDoorWithStopperCloser 3

  -- echo "\$door is a DoorWithStopperCloser...\n";
  putStrLn "door is a DoorWithStopperCloser"

  -- $door->is_open();
  -- $door->knob->turn(); $door->push();
  -- echo '$door->knob->turn(); $door->push(); $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  knobTurn door
  push door
  isOpen door
    >>= putStrLn . ("knobTurn door; push door; isOpen door => " ++) . show

  -- $door->be_stoppered_on();
  beStopperedOn door

  -- echo '$door->be_stoppered_on(); then 4 seconds after';
  -- sleep(4);
  putStrLn "beStopperedOn door; then 4 seconds after"
  threadDelay (4*1000*1000)

  -- echo ', $door->is_close(); => '.($door->is_close()?'true':'false')."\n";
  isClose door >>= putStrLn . ("isClose door => " ++) . show

  -- $door->be_stoppered_off();
  beStopperedOff door

  -- echo '$door->be_stoppered_off(); then 4 seconds after';
  putStrLn "beStopperedOff door; then 4 seconds after"
  threadDelay (4*1000*1000)

  -- echo ', $door->is_close(); => '.($door->is_close()?'true':'false')."\n";
  isClose door >>= putStrLn . ("isClose door => " ++) . show

  -- $door->knob->turn(); $door->push();
  knobTurn door
  push door

  -- echo '$door->knob->turn(); $door->push(); $door->is_open(); => '.($door->is_open()?'true':'false')."\n";
  isOpen door
    >>= putStrLn . ("knobTurn door; push door; isOpen door => " ++) . show

  -- $door->be_stoppered_on();
  beStopperedOn door

  -- echo '$door->be_stoppered_on(); then 4 seconds after';
  -- sleep(4);
  putStrLn "beStopperedOn door; then 4 seconds after"
  threadDelay (4*1000*1000)

  -- echo ', $door->is_close(); => '.($door->is_close()?'true':'false')."\n";
  isClose door >>= putStrLn . ("isClose door => " ++) . show

  -- $door->push();
  push door

  -- echo '$door->push(); then 4 seconds after';
  putStrLn "pudh door; then 4 seconds after"

  -- sleep(4);
  threadDelay (4*1000*1000)

  -- echo ', $door->is_close(); => '.($door->is_close()?'true':'false')."\n";
  isClose door >>= putStrLn . ("isClose door => " ++) . show

main, test1, test2, test3, test4  :: IO ()
main = mapM_ id [test1,test2,test3,test4]
 
