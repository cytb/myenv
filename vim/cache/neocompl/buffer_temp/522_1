import System.Environment(getArgs)
import qualified Data.Text.IO as T
import qualified Data.Text    as T
import Data.List(mapAccumL)

search1 = T.isInfixOf
search2 = T.count
search3 word content = (ps /= [], length ps, ps)
  where ps        = concat . zipWith indices [0..] $ T.lines content
        indices l = map (,) . zipWith (+) [0, T.length word ..] . scanl1 (+) . subLength
        subLength = init . map T.length . T.splitOn word

main = do
  (file:word:_) <- getArgs 
  print =<< search1 (T.pack word) <$> T.readFile file
  print =<< search2 (T.pack word) <$> T.readFile file
  print =<< search3 (T.pack word) <$> T.readFile file

